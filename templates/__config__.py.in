"""
This file is generated by cmake during the build process.
Do not edit manually.
"""
# SPDX - FileCopyrightText : 2025 Advanced Micro Devices, Inc.
#
# SPDX - License - Identifier : Apache - 2.0

from typing import Dict, Any

__all__ = ['show', 'get_info', 'version']

# Build and version information
try:
    from ._version import __version__
except ImportError:
    __version__ = "0.0.0+unknown"

git_revision = "@GIT_HASH@"
build_type = "@CMAKE_BUILD_TYPE@"

# Configuration options
enable_f16 = @enable_f16@
enable_bf16 = @enable_bf16@
enable_fp8_e4m3 = @enable_fp8_e4m3@
enable_fp8_e5m2 = @enable_fp8_e5m2@

# Architecture options
min_cuda_arch = @min_cuda_arch@
enable_sm90_optimizations = @enable_sm90_optimizations@

# AOT extension information
aot_torch_exts_cuda = @aot_torch_exts_cuda@
aot_torch_exts_cuda_archs = @aot_torch_exts_cuda_archs@

# Torch information (only if AOT extensions were built)
@TORCH_INFO_BLOCK@

# System information
@SYS_INFO_BLOCK@

# Dictionary with all configuration info
_info: Dict[str, Any] = {
    'version': __version__,
    'git_revision': git_revision,
    'build_type': build_type,
    'enable_f16': enable_f16,
    'enable_bf16': enable_bf16,
    'enable_fp8_e4m3': enable_fp8_e4m3,
    'enable_fp8_e5m2': enable_fp8_e5m2,
    'min_cuda_arch': min_cuda_arch,
    'enable_sm90_optimizations': enable_sm90_optimizations,
    'aot_torch_exts_cuda': aot_torch_exts_cuda,
    'aot_torch_exts_cuda_archs': aot_torch_exts_cuda_archs,
    @INFO_DICT_ENTRIES@
}

def get_info(name: str = None) -> Dict[str, Any]:
    """
    Return build and configuration information about FlashInfer.
    """
    if name is None:
        return _info
    if name in _info:
        return _info[name]
    raise KeyError(f"No configuration option named '{name}'")

def show() -> None:
    """
    Print build and configuration information about FlashInfer.
    """
    print("FlashInfer Configuration:")
    print("-" * 40)
    for k, v in sorted(_info.items()):
        if k not in ('_info',):
            print(f"{k:<20} : {v}")
